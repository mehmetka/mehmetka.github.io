"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[8792],{3905:(e,t,a)=>{a.d(t,{Zo:()=>c,kt:()=>f});var r=a(7294);function i(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function n(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function l(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?n(Object(a),!0).forEach((function(t){i(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):n(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,r,i=function(e,t){if(null==e)return{};var a,r,i={},n=Object.keys(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||(i[a]=e[a]);return i}(e,t);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);for(r=0;r<n.length;r++)a=n[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(i[a]=e[a])}return i}var s=r.createContext({}),u=function(e){var t=r.useContext(s),a=t;return e&&(a="function"==typeof e?e(t):l(l({},t),e)),a},c=function(e){var t=u(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var a=e.components,i=e.mdxType,n=e.originalType,s=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),m=u(a),d=i,f=m["".concat(s,".").concat(d)]||m[d]||p[d]||n;return a?r.createElement(f,l(l({ref:t},c),{},{components:a})):r.createElement(f,l({ref:t},c))}));function f(e,t){var a=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var n=a.length,l=new Array(n);l[0]=d;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o[m]="string"==typeof e?e:i,l[1]=o;for(var u=2;u<n;u++)l[u]=a[u];return r.createElement.apply(null,l)}return r.createElement.apply(null,a)}d.displayName="MDXCreateElement"},9475:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>s,contentTitle:()=>l,default:()=>p,frontMatter:()=>n,metadata:()=>o,toc:()=>u});var r=a(7462),i=(a(7294),a(3905));const n={tags:["technical","git"]},l="Git Flow",o={unversionedId:"technical/git/gitflow",id:"technical/git/gitflow",title:"Git Flow",description:"Gitflow kullan\u0131m\u0131 ve branch y\xf6netimi",source:"@site/docs/technical/git/gitflow.md",sourceDirName:"technical/git",slug:"/technical/git/gitflow",permalink:"/technical/git/gitflow",draft:!1,editUrl:"https://github.com/mehmetka/notebook/blob/master/docs/technical/git/gitflow.md",tags:[{label:"technical",permalink:"/tags/technical"},{label:"git",permalink:"/tags/git"}],version:"current",frontMatter:{tags:["technical","git"]},sidebar:"tutorialSidebar",previous:{title:"git",permalink:"/category/git"},next:{title:"Github Flow",permalink:"/technical/git/githubflow"}},s={},u=[{value:"Gitflow kullan\u0131m\u0131 ve branch y\xf6netimi",id:"gitflow-kullan\u0131m\u0131-ve-branch-y\xf6netimi",level:2},{value:"https://medium.com/javarevisited/5-different-git-workflows-50f75d8783a7",id:"httpsmediumcomjavarevisited5-different-git-workflows-50f75d8783a7",level:2},{value:"Advantages",id:"advantages",level:3},{value:"Disadvantages",id:"disadvantages",level:3},{value:"https://buddy.works/blog/5-types-of-git-workflows",id:"httpsbuddyworksblog5-types-of-git-workflows",level:2},{value:"Pablo Ezequiel Leone Signetti",id:"pablo-ezequiel-leone-signetti",level:2},{value:"https://stackoverflow.com/a/35915110",id:"httpsstackoverflowcoma35915110",level:2},{value:"Multiple versions in production - use Git-flow",id:"multiple-versions-in-production---use-git-flow",level:3},{value:"Single version in production simple software - use Github-flow",id:"single-version-in-production-simple-software---use-github-flow",level:3},{value:"Single Version in production but very complex software - use Gitlab-flow",id:"single-version-in-production-but-very-complex-software---use-gitlab-flow",level:3}],c={toc:u},m="wrapper";function p(e){let{components:t,...a}=e;return(0,i.kt)(m,(0,r.Z)({},c,a,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("h1",{id:"git-flow"},"Git Flow"),(0,i.kt)("h2",{id:"gitflow-kullan\u0131m\u0131-ve-branch-y\xf6netimi"},(0,i.kt)("a",{parentName:"h2",href:"https://medium.com/software-development-turkey/git-flow-kullan%C4%B1m%C4%B1-ve-branch-y%C3%B6netimi-3a66a6106ddc"},"Gitflow kullan\u0131m\u0131 ve branch y\xf6netimi")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Master: \u015eu anda client taraf\u0131nda kullan\u0131lan s\xfcr\xfcm."),(0,i.kt)("li",{parentName:"ul"},"Hotfix: Release branch'inde olabilecek hatalar\u0131n \xe7\xf6z\xfcm\xfc i\xe7in, resimden de anlad\u0131\u011f\u0131n\u0131z gibi master'a, yani aktif",(0,i.kt)("br",{parentName:"li"}),"sisteme at\u0131lan bugfix'ler i\xe7in olu\u015fturulmu\u015ftur."),(0,i.kt)("li",{parentName:"ul"},"Release: Canl\u0131ya al\u0131nmadan \xf6nce geli\u015ftirmeleri, testleri ve her\u015feyi tamamlanan kullan\u0131c\u0131lara a\xe7\u0131lmay\u0131 bekleyen",(0,i.kt)("br",{parentName:"li"}),"\xf6zelliklerin tutuldu\u011fu branch."),(0,i.kt)("li",{parentName:"ul"},"Develop: Developer taraf\u0131nda geli\u015ftirmeleri tamamlanan \xf6zelliklerin tutuldu\u011fu branch olarak d\xfc\u015f\xfcn\xfclmelidir.",(0,i.kt)("br",{parentName:"li"}),"Geli\u015ftirmesi tamamlanan \xf6zellikler Release branch'i ile birle\u015ftirilir."),(0,i.kt)("li",{parentName:"ul"},"Feature: Yeni bir \xf6zellik i\xe7in olu\u015fturulan bu branch i\u015flemin tamamlanmas\u0131ndan sonra Develop branch'i ile",(0,i.kt)("br",{parentName:"li"}),"birle\u015ftirilir.")),(0,i.kt)("h2",{id:"httpsmediumcomjavarevisited5-different-git-workflows-50f75d8783a7"},(0,i.kt)("a",{parentName:"h2",href:"https://medium.com/javarevisited/5-different-git-workflows-50f75d8783a7"},"https://medium.com/javarevisited/5-different-git-workflows-50f75d8783a7")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"It is almost similar to the feature branch workflow. But the difference is the developers are creating branches from",(0,i.kt)("br",{parentName:"li"}),"the develop branch and it is a branch of master branch. Developers are not allowed to create branches directly from",(0,i.kt)("br",{parentName:"li"}),"master branch. This flow eliminates buggy code from the master branch.")),(0,i.kt)("h3",{id:"advantages"},"Advantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Git Flow is used by a lot of distributed, open-source teams that have varying skill levels. The project maintainers",(0,i.kt)("br",{parentName:"li"}),"can review and approve every line of code going into releases."),(0,i.kt)("li",{parentName:"ul"},"Git Flow can work well for a traditional release model, where releases are done in terms of months and weeks."),(0,i.kt)("li",{parentName:"ul"},"Git Flow also works well when dealing with an established product or multiple versions in production.")),(0,i.kt)("h3",{id:"disadvantages"},"Disadvantages"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Git Flow can slow things down when having to look at large pull requests if you are trying to iterate quickly."),(0,i.kt)("li",{parentName:"ul"},"Releases are hard to do more than once a week."),(0,i.kt)("li",{parentName:"ul"},"Larger features can spend days merging and resolving conflicts (merge hell) and force multiple testing cycles."),(0,i.kt)("li",{parentName:"ul"},"The Project history is full of merge commits and makes it hard to see the actual work."),(0,i.kt)("li",{parentName:"ul"},"Can be problematic in Continuous Integration or Continuous Delivery scenarios.")),(0,i.kt)("h2",{id:"httpsbuddyworksblog5-types-of-git-workflows"},(0,i.kt)("a",{parentName:"h2",href:"https://buddy.works/blog/5-types-of-git-workflows"},"https://buddy.works/blog/5-types-of-git-workflows")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Master: used for releases only"),(0,i.kt)("li",{parentName:"ul"},"Develop: created from Master, this is the home of all completed and stable features prepared for the next release"),(0,i.kt)("li",{parentName:"ul"},"When you start working on a new feature, create a new Feature branch from Develop. Create as many feature branches in",(0,i.kt)("br",{parentName:"li"}),"parallel as you want and need. When the work is done and the feature is tested, merge the code back to Develop."),(0,i.kt)("li",{parentName:"ul"},"Then, when the time to release comes, isolate the new features from the Develop branch on a new Release branch. Make",(0,i.kt)("br",{parentName:"li"}),"sure that the release is well tested and stable."),(0,i.kt)("li",{parentName:"ul"},"Depending on the character of your project, it might be a good idea to release an RC (Release Candidate) version of",(0,i.kt)("br",{parentName:"li"}),"your software to the public."),(0,i.kt)("li",{parentName:"ul"},"When the release is stable and all kinks are ironed out, merge your release branch back to Master and deploy to",(0,i.kt)("br",{parentName:"li"}),"production!")),(0,i.kt)("h2",{id:"pablo-ezequiel-leone-signetti"},(0,i.kt)("a",{parentName:"h2",href:"https://danielkummer.github.io/git-flow-cheatsheet"},"Pablo Ezequiel Leone Signetti")),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Hotfixes are from master."),(0,i.kt)("li",{parentName:"ul"},"Bugfixes can be either from release/latest or development and tag the version that are fixing, current version on",(0,i.kt)("br",{parentName:"li"}),"development or the next version in the release/latest branch."),(0,i.kt)("li",{parentName:"ul"},"You can bugfix a feature in development."),(0,i.kt)("li",{parentName:"ul"},"You can bugfix the release/latest branch before the official release."),(0,i.kt)("li",{parentName:"ul"},"Having a release/1.0.0 is useless in some environments, where preproduction is not generated automatically by CI. Our",(0,i.kt)("br",{parentName:"li"}),"system is serving release/latest in preproduction and we always merge development into release/latest to be able to",(0,i.kt)("br",{parentName:"li"}),"test the next release. Once is fully finished we create release/{version} to meet the standard and after merging into",(0,i.kt)("br",{parentName:"li"}),"master we tag the new version."),(0,i.kt)("li",{parentName:"ul"},"As you can see we have, hotfix/xxx, feature/xxx, bugfix/xxx, release/xxx, development and master branches. (xxx: task",(0,i.kt)("br",{parentName:"li"}),"code in Jira, Trello, etc.)")),(0,i.kt)("h2",{id:"httpsstackoverflowcoma35915110"},(0,i.kt)("a",{parentName:"h2",href:"https://stackoverflow.com/a/35915110"},"https://stackoverflow.com/a/35915110")),(0,i.kt)("h3",{id:"multiple-versions-in-production---use-git-flow"},"Multiple versions in production - use Git-flow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If your code is having multiple versions in production (i.e. typical software products like Operating Systems, Office",(0,i.kt)("br",{parentName:"li"}),"Packages, Custom applications, etc)"),(0,i.kt)("li",{parentName:"ul"},"you may use git-flow. Main reason is that you need to continuously support previous versions in production while",(0,i.kt)("br",{parentName:"li"}),"developing the next version.")),(0,i.kt)("h3",{id:"single-version-in-production-simple-software---use-github-flow"},"Single version in production simple software - use Github-flow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"If your code is having only one version in production at all times (i.e. web sites, web services, etc) you may use",(0,i.kt)("br",{parentName:"li"}),"github-flow."),(0,i.kt)("li",{parentName:"ul"},"Main reason is that you don't need to complex things for the developer. Once developer finish a feature or finish a",(0,i.kt)("br",{parentName:"li"}),"bugfix its immediately promoted to production version.")),(0,i.kt)("h3",{id:"single-version-in-production-but-very-complex-software---use-gitlab-flow"},"Single Version in production but very complex software - use Gitlab-flow"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Large software like Facebook and Gmail, you may need to introduce deployment branches between your branch and master",(0,i.kt)("br",{parentName:"li"}),"branch where CI/CD tools could run,"),(0,i.kt)("li",{parentName:"ul"},"before it gets in to production. Idea is to introduce more protection to production version since its used by millions",(0,i.kt)("br",{parentName:"li"}),"of people.")),(0,i.kt)("p",null,(0,i.kt)("em",{parentName:"p"},">_ Unknown")," (2022-08-13 20:59:45)"),(0,i.kt)("p",null,"tags: technical, git"))}p.isMDXComponent=!0}}]);
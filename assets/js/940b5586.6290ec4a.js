"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[1588],{3905:(e,t,a)=>{a.d(t,{Zo:()=>s,kt:()=>k});var r=a(7294);function n(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function o(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,r)}return a}function i(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?o(Object(a),!0).forEach((function(t){n(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function c(e,t){if(null==e)return{};var a,r,n=function(e,t){if(null==e)return{};var a,r,n={},o=Object.keys(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||(n[a]=e[a]);return n}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)a=o[r],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(n[a]=e[a])}return n}var l=r.createContext({}),p=function(e){var t=r.useContext(l),a=t;return e&&(a="function"==typeof e?e(t):i(i({},t),e)),a},s=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},m=r.forwardRef((function(e,t){var a=e.components,n=e.mdxType,o=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),d=p(a),m=n,k=d["".concat(l,".").concat(m)]||d[m]||u[m]||o;return a?r.createElement(k,i(i({ref:t},s),{},{components:a})):r.createElement(k,i({ref:t},s))}));function k(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var o=a.length,i=new Array(o);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[d]="string"==typeof e?e:n,i[1]=c;for(var p=2;p<o;p++)i[p]=a[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,a)}m.displayName="MDXCreateElement"},83:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>u,frontMatter:()=>o,metadata:()=>c,toc:()=>p});var r=a(7462),n=(a(7294),a(3905));const o={tags:["aws","technical"]},i="Customizing Lambda with Docker Image",c={unversionedId:"technical/aws/lambda-docker-image",id:"technical/aws/lambda-docker-image",title:"Customizing Lambda with Docker Image",description:"Dockerfile",source:"@site/docs/technical/aws/lambda-docker-image.md",sourceDirName:"technical/aws",slug:"/technical/aws/lambda-docker-image",permalink:"/technical/aws/lambda-docker-image",draft:!1,editUrl:"https://github.com/mehmetka/notebook/blob/master/docs/technical/aws/lambda-docker-image.md",tags:[{label:"aws",permalink:"/tags/aws"},{label:"technical",permalink:"/tags/technical"}],version:"current",frontMatter:{tags:["aws","technical"]},sidebar:"tutorialSidebar",previous:{title:"Customizing Lambda with Docker Image (+Trigger)",permalink:"/technical/aws/lambda-docker-image-with-trigger"},next:{title:"uncategorized",permalink:"/technical/aws/uncategorized"}},l={},p=[{value:"Dockerfile",id:"dockerfile",level:2},{value:"workdir/app.py",id:"workdirapppy",level:2},{value:"Testing at local",id:"testing-at-local",level:2},{value:"ECR Operations",id:"ecr-operations",level:2},{value:"Create Lambda",id:"create-lambda",level:2},{value:"Auto build and push with Gitlab CI",id:"auto-build-and-push-with-gitlab-ci",level:2}],s={toc:p},d="wrapper";function u(e){let{components:t,...a}=e;return(0,n.kt)(d,(0,r.Z)({},s,a,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("h1",{id:"customizing-lambda-with-docker-image"},"Customizing Lambda with Docker Image"),(0,n.kt)("h2",{id:"dockerfile"},"Dockerfile"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'FROM public.ecr.aws/lambda/python:3.8  \nRUN yum -y install some-stuff  \nCOPY app.py ${LAMBDA_TASK_ROOT}  \nRUN pip3 install --target "${LAMBDA_TASK_ROOT}" dependencies  \nCMD [ "app.handler" ]  \n')),(0,n.kt)("h2",{id:"workdirapppy"},"workdir/app.py"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"def handler(event, context):  \n    # your code  \n")),(0,n.kt)("h2",{id:"testing-at-local"},"Testing at local"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'cd workdir  \ndocker build -t ecr-repository-name .  \ndocker run --rm -v "$PWD":/tmp -p 9001:8080 ecr-repository-name  \ncurl -XPOST "http://localhost:9001/2015-03-31/functions/function/invocations" -d \'{}\'  \n')),(0,n.kt)("h2",{id:"ecr-operations"},"ECR Operations"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Required permissions to do ECR operations")),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},'"ecr:CreateRepository",  \n"ecr:BatchGetImage",  \n"ecr:GetAuthorizationToken",  \n"ecr:UploadLayerPart",  \n"ecr:PutImage",  \n"ecr:BatchCheckLayerAvailability",  \n"ecr:CompleteLayerUpload",  \n"ecr:GetDownloadUrlForLayer",  \n"ecr:InitiateLayerUpload"  \n')),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"Create a repository on ECR"),(0,n.kt)("li",{parentName:"ul"},"Build image (We did already before)"),(0,n.kt)("li",{parentName:"ul"},"docker tag ecr-repository-name:latest account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest"),(0,n.kt)("li",{parentName:"ul"},"aws ecr get-login-password --region location | docker login --username AWS --password-stdin account-id.dkr.ecr.location.amazonaws.com"),(0,n.kt)("li",{parentName:"ul"},"docker push account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest")),(0,n.kt)("h2",{id:"create-lambda"},"Create Lambda"),(0,n.kt)("p",null,"Create Function > Container Image > Fill the required fields > Select container image URI > Finalize Create Function",(0,n.kt)("br",{parentName:"p"}),"\n","step"),(0,n.kt)("blockquote",null,(0,n.kt)("p",{parentName:"blockquote"},"Add trigger to your lambda if needed")),(0,n.kt)("h2",{id:"auto-build-and-push-with-gitlab-ci"},"Auto build and push with Gitlab CI"),(0,n.kt)("pre",null,(0,n.kt)("code",{parentName:"pre"},"stages:  \n  - build  \n  - push\n\nbuild:  \n  only:  \n    - master  \n  stage: build  \n  script:  \n    - docker build -t ecr-repository-name .  \n    - docker tag ecr-repository-name:latest account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest  \n  tags:  \n    - cd\n\npush:  \n  only:  \n    - master  \n  stage: push  \n  script:  \n    - aws ecr get-login-password --region location | docker login --username AWS --password-stdin account-id.dkr.ecr.location.amazonaws.com  \n    - docker push account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest  \n  tags:  \n    - cd  \n")),(0,n.kt)("p",null,(0,n.kt)("em",{parentName:"p"},">_ Unknown")," (2022-08-13 20:54:54)"),(0,n.kt)("p",null,"tags: aws, technical"))}u.isMDXComponent=!0}}]);
"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[2130],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>g});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)t=l[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=a.createContext({}),i=function(e){var n=a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=i(e.components);return a.createElement(c.Provider,{value:n},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},d=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,l=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),m=i(t),d=r,g=m["".concat(c,".").concat(d)]||m[d]||u[d]||l;return t?a.createElement(g,o(o({ref:n},p),{},{components:t})):a.createElement(g,o({ref:n},p))}));function g(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var l=t.length,o=new Array(l);o[0]=d;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s[m]="string"==typeof e?e:r,o[1]=s;for(var i=2;i<l;i++)o[i]=t[i];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},9505:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>l,metadata:()=>s,toc:()=>i});var a=t(7462),r=(t(7294),t(3905));const l={tags:["technical","aws"]},o="Elasticbeanstalk PHP Environment",s={unversionedId:"technical/aws/elasticbeanstalk-php-env",id:"technical/aws/elasticbeanstalk-php-env",title:"Elasticbeanstalk PHP Environment",description:"Use exist security group:",source:"@site/docs/technical/aws/elasticbeanstalk-php-env.md",sourceDirName:"technical/aws",slug:"/technical/aws/elasticbeanstalk-php-env",permalink:"/technical/aws/elasticbeanstalk-php-env",draft:!1,editUrl:"https://github.com/mehmetka/notebook/blob/master/docs/technical/aws/elasticbeanstalk-php-env.md",tags:[{label:"technical",permalink:"/tags/technical"},{label:"aws",permalink:"/tags/aws"}],version:"current",frontMatter:{tags:["technical","aws"]},sidebar:"tutorialSidebar",previous:{title:"Send Docker Images to AWS ECR",permalink:"/technical/aws/ecr-push-image"},next:{title:"Accessing RDS from Lambda",permalink:"/technical/aws/lambda-accessing-rds"}},c={},i=[],p={toc:i},m="wrapper";function u(e){let{components:n,...t}=e;return(0,r.kt)(m,(0,a.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"elasticbeanstalk-php-environment"},"Elasticbeanstalk PHP Environment"),(0,r.kt)("p",null,"Use exist security group:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"option_settings:  \n  - namespace: aws:autoscaling:launchconfiguration  \n    option_name: SecurityGroups  \n    value: securitygroup-name  \n")),(0,r.kt)("p",null,"Customize PHP-FPM settings:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'option_settings:  \n  aws:elasticbeanstalk:environment:proxy:  \n    ProxyServer: apache\n\nfiles:  \n  "/etc/php-fpm.d/z-99-custom.conf":  \n    mode: "000755"  \n    owner: root  \n    group: root  \n    content: |  \n      [www]  \n      pm=ondemand  \n      pm.max_children=50  \n      pm.start_servers=5  \n      pm.min_spare_servers=5  \n      pm.max_spare_servers=25\n\n  "/tmp/calc-php-fpm.sh":  \n    mode: "000755"  \n    owner: root  \n    group: root  \n    content: |  \n      #!/usr/bin/env bash\n\n      MAX_CHILDREN=$(free -m | awk \'FNR == 2 {print int(($2-350)/18 / 5) * 5}\')  \n      MIN_SPARE=$(($MAX_CHILDREN/5*1))  \n      MAX_SPARE=$(($MAX_CHILDREN/5*2))  \n      START=$(($MIN_SPARE + ($MAX_SPARE - $MIN_SPARE) / 2))\n\n      cat <<EOT > /etc/php-fpm.d/z-99-custom.conf  \n      [www]  \n      pm=dynamic  \n      pm.max_children=$MAX_CHILDREN  \n      pm.start_servers=$START  \n      pm.min_spare_servers=$MIN_SPARE  \n      pm.max_spare_servers=$MAX_SPARE  \n      EOT\n\ncommands:  \n  configure_www_conf:  \n    command: bash /tmp/calc-php-fpm.sh  \n')),(0,r.kt)("p",null,"Environment Variables:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"option_settings:  \n  aws:elasticbeanstalk:application:environment:  \n    DB_WRITER_HOST: rds-host  \n    DB_WRITER_USER: username  \n    DB_WRITER_PASSWORD: password  \n    DB_WRITER_DATABASE: database  \n    DB_READER_HOST: rds-host  \n    DB_READER_USER: username  \n    DB_READER_PASSWORD: password  \n    DB_READER_DATABASE: database  \n")),(0,r.kt)("p",null,"Create custom folder:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'container_commands:  \n  01_create_tmp_folder:  \n    command: "mkdir /var/tmp && chown -R webapp:webapp /var/tmp"  \n    ignoreErrors: true  \n')),(0,r.kt)("p",null,"Install custom packages:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"packages:  \n  yum:  \n    packageName: [ ]  \n")),(0,r.kt)("p",null,"Install PHP extensions with PECL:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"commands:  \n  install_mongo_driver_command:  \n    command: pecl install mongodb  \n    ignoreErrors: true  \n")),(0,r.kt)("p",null,"Set Auto Scaling Rules:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'option_settings:  \n  aws:autoscaling:asg:  \n    Availability Zones: Any  \n    MaxSize: "4"  \n    MinSize: "2"  \n')),(0,r.kt)("p",null,"Set Deployment Type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"option_settings:  \n  aws:elasticbeanstalk:command:  \n    DeploymentPolicy: RollingWithAdditionalBatch  \n    BatchSizeType: Fixed  \n    BatchSize: 2  \n    IgnoreHealthCheck: true  \n")),(0,r.kt)("p",null,"Add HTTPs Listener to ALB"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"option_settings:  \n  aws:elbv2:listener:443:  \n    ListenerEnabled: 'true'  \n    Protocol: HTTPS  \n    SSLCertificateArns: certificate-arn  \n")),(0,r.kt)("p",null,"Add Custom Health Path:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"option_settings:  \n  aws:elasticbeanstalk:environment:process:default:  \n    HealthCheckPath: /health-check-route  \n")),(0,r.kt)("p",null,"Cloudwatch Configurations:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"option_settings:  \n  - namespace: aws:elasticbeanstalk:cloudwatch:logs  \n    option_name: StreamLogs  \n    value: true  \n  - namespace: aws:elasticbeanstalk:cloudwatch:logs:health  \n    option_name: HealthStreamingEnabled  \n    value: false  \n  - namespace: aws:elasticbeanstalk:cloudwatch:logs:health  \n    option_name: DeleteOnTerminate  \n    value: true  \n  - namespace: aws:elasticbeanstalk:cloudwatch:logs:health  \n    option_name: RetentionInDays  \n    value: 7  \n")),(0,r.kt)("p",null,"Install New Relic APM Agent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},"packages:  \n  yum:  \n    newrelic-php5: [ ]  \n  rpm:  \n    newrelic: http://yum.newrelic.com/pub/newrelic/el5/x86_64/newrelic-repo-5-3.noarch.rpm  \ncommands:  \n  configure_new_relic:  \n    command: newrelic-install install  \n    env:  \n      NR_INSTALL_SILENT: true  \n      NR_INSTALL_KEY: newrelic-key  \n")),(0,r.kt)("p",null,"Install New Relic Infrastructure Agent:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-yaml"},'files:  \n  "/etc/newrelic-infra.yml":  \n    mode: "000644"  \n    owner: root  \n    group: root  \n    content: |  \n      license_key: licence_key\n\ncommands:  \n  "01-agent-repository":  \n    command: sudo curl -o /etc/yum.repos.d/newrelic-infra.repo https://download.newrelic.com/infrastructure_agent/linux/yum/amazonlinux/2/x86_64/newrelic-infra.repo\n\n  "02-update-yum-cache":  \n    command: yum -q makecache -y --disablerepo=\'*\' --enablerepo=\'newrelic-infra\'\n\n  "03-run-installation-script":  \n    command: sudo yum install newrelic-infra -y  \n')),(0,r.kt)("p",null,"customizing apache conf",(0,r.kt)("br",{parentName:"p"}),"\n",".platform/httpd/conf.d/x.conf:  "),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'CustomLog logs/access_log "%{X-Forwarded-For}i %l %u %t \\"%r\\" %>s %b \\"%{Referer}i\\" \\"%{User-Agent}i\\" [%T/%D]"  \n')),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},">_ Unknown")," (2022-08-13 20:54:16)"),(0,r.kt)("p",null,"tags: technical, aws"))}u.isMDXComponent=!0}}]);
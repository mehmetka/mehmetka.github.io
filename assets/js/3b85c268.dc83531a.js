"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[8746],{3905:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>g});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),d=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},s=function(e){var t=d(e.components);return a.createElement(c.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),p=d(n),m=r,g=p["".concat(c,".").concat(m)]||p[m]||u[m]||i;return n?a.createElement(g,o(o({ref:t},s),{},{components:n})):a.createElement(g,o({ref:t},s))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[p]="string"==typeof e?e:r,o[1]=l;for(var d=2;d<i;d++)o[d]=n[d];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},563:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>d});var a=n(7462),r=(n(7294),n(3905));const i={tags:["aws","technical"]},o="Customizing Lambda with Docker Image (+Trigger)",l={unversionedId:"technical/aws/lambda-docker-image-with-trigger",id:"technical/aws/lambda-docker-image-with-trigger",title:"Customizing Lambda with Docker Image (+Trigger)",description:"Manipulating Images with Pillow & Imagemagick, Python 3.8 - Lambda Docker Image (S3 File Upload Trigger)",source:"@site/docs/technical/aws/lambda-docker-image-with-trigger.md",sourceDirName:"technical/aws",slug:"/technical/aws/lambda-docker-image-with-trigger",permalink:"/technical/aws/lambda-docker-image-with-trigger",draft:!1,editUrl:"https://github.com/mehmetka/notebook/blob/master/docs/technical/aws/lambda-docker-image-with-trigger.md",tags:[{label:"aws",permalink:"/tags/aws"},{label:"technical",permalink:"/tags/technical"}],version:"current",frontMatter:{tags:["aws","technical"]},sidebar:"tutorialSidebar",previous:{title:"Accessing RDS from Lambda",permalink:"/technical/aws/lambda-accessing-rds"},next:{title:"Customizing Lambda with Docker Image",permalink:"/technical/aws/lambda-docker-image"}},c={},d=[{value:"Dockerfile",id:"dockerfile",level:2},{value:"workdir/app.py",id:"workdirapppy",level:2},{value:"Testing at local",id:"testing-at-local",level:2},{value:"S3 Payload",id:"s3-payload",level:3},{value:"Source Bucket and Destination Bucket Permissions",id:"source-bucket-and-destination-bucket-permissions",level:2},{value:"Source bucket:",id:"source-bucket",level:3},{value:"Destination bucket:",id:"destination-bucket",level:3},{value:"ECR Operations",id:"ecr-operations",level:2},{value:"Create Lambda",id:"create-lambda",level:2},{value:"Add Trigger",id:"add-trigger",level:2},{value:"Auto build and push",id:"auto-build-and-push",level:2}],s={toc:d},p="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(p,(0,a.Z)({},s,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"customizing-lambda-with-docker-image-trigger"},"Customizing Lambda with Docker Image (+Trigger)"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Manipulating Images with Pillow & Imagemagick, Python 3.8 - Lambda Docker Image (S3 File Upload Trigger)")),(0,r.kt)("h2",{id:"dockerfile"},"Dockerfile"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'FROM public.ecr.aws/lambda/python:3.8  \nRUN yum -y install +bytecode ImageMagick-devel OpenEXR-devel autotrace-devel bzip2-devel freetype freetype-devel ghostscript-devel giflib-devel graphviz gs imagemagick jasper-devel jbig jpeg jpeg2 lcms lcms-devel ldconfig libXext-devel libXt-devel libfreetype6-dev libjpeg libjpeg-devel libjpeg62-turbo-dev liblpr-1 liblqr-1-devel libpng-dev librsvg librsvg2 librsvg2* libtiff libtiff-devel libtool-ltdl-devel libwebp libwebp-devel libwebp-tools libwmf-devel rpmdevtool wmf zlib1g-dev  \nCOPY app.py ${LAMBDA_TASK_ROOT}  \nRUN pip3 install --target "${LAMBDA_TASK_ROOT}" pillow  \nCMD [ "app.handler" ]  \n')),(0,r.kt)("h2",{id:"workdirapppy"},"workdir/app.py"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"def handler(event, context):  \n    # do image manipulation ops  \n")),(0,r.kt)("h2",{id:"testing-at-local"},"Testing at local"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'cd workdir  \ndocker build -t ecr-repository-name .  \ndocker run --rm -e AWS_ACCESS_KEY_ID="..." -e AWS_SECRET_ACCESS_KEY="..." -e AWS_REGION="location" -v "$PWD":/tmp -p 9001:8080 ecr-repository-name  \ncurl -XPOST "http://localhost:9001/2015-03-31/functions/function/invocations" -d \'{}\'  \n')),(0,r.kt)("h3",{id:"s3-payload"},"S3 Payload"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{  \n  "Records": [  \n    {  \n      "eventVersion": "2.1",  \n      "eventSource": "aws:s3",  \n      "awsRegion": "location",  \n      "eventTime": "2022-07-26T09:28:13.160Z",  \n      "eventName": "ObjectCreated:Put",  \n      "userIdentity": {  \n        "principalId": "AWS:..."  \n      },  \n      "requestParameters": {  \n        "sourceIPAddress": "127.0.0.1"  \n      },  \n      "responseElements": {  \n        "x-amz-request-id": "...",  \n        "x-amz-id-2": "..."  \n      },  \n      "s3": {  \n        "s3SchemaVersion": "1.0",  \n        "configurationId": "...",  \n        "bucket": {  \n          "name": "bucket-name",  \n          "ownerIdentity": {  \n            "principalId": "..."  \n          },  \n          "arn": "arn:aws:s3:::source-bucket-name"  \n        },  \n        "object": {  \n          "key": "imageName.jpg",  \n          "size": 26862,  \n          "eTag": "...",  \n          "sequencer": "..."  \n        }  \n      }  \n    }  \n  ]  \n}  \n')),(0,r.kt)("h2",{id:"source-bucket-and-destination-bucket-permissions"},"Source Bucket and Destination Bucket Permissions"),(0,r.kt)("p",null,"Create permissions like below and give it to the lambda role to be able to work with Buckets."),(0,r.kt)("h3",{id:"source-bucket"},"Source bucket:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{  \n  "Version": "2012-10-17",  \n  "Statement": [  \n    {  \n      "Sid": "VisualEditor0",  \n      "Effect": "Allow",  \n      "Action": [  \n        "s3:*",  \n        "s3-object-lambda:*"  \n      ],  \n      "Resource": "arn:aws:s3:::source-bucket-name/*"  \n    }  \n  ]  \n}  \n')),(0,r.kt)("h3",{id:"destination-bucket"},"Destination bucket:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'{  \n  "Version": "2012-10-17",  \n  "Statement": [  \n    {  \n      "Sid": "VisualEditor0",  \n      "Effect": "Allow",  \n      "Action": [  \n        "s3:*",  \n        "s3-object-lambda:*"  \n      ],  \n      "Resource": "arn:aws:s3:::destination-bucket-name/*"  \n    }  \n  ]  \n}  \n')),(0,r.kt)("h2",{id:"ecr-operations"},"ECR Operations"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Required permissions to do ECR operations")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'"ecr:CreateRepository",  \n"ecr:BatchGetImage",  \n"ecr:GetAuthorizationToken",  \n"ecr:UploadLayerPart",  \n"ecr:PutImage",  \n"ecr:BatchCheckLayerAvailability",  \n"ecr:CompleteLayerUpload",  \n"ecr:GetDownloadUrlForLayer",  \n"ecr:InitiateLayerUpload"  \n')),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Create repository"),(0,r.kt)("li",{parentName:"ul"},"Build image (We did already before)"),(0,r.kt)("li",{parentName:"ul"},"docker tag ecr-repository-name:latest account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest"),(0,r.kt)("li",{parentName:"ul"},"aws ecr get-login-password --region location | docker login --username AWS --password-stdin",(0,r.kt)("br",{parentName:"li"}),"account-id.dkr.ecr.location.amazonaws.com"),(0,r.kt)("li",{parentName:"ul"},"docker push account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest")),(0,r.kt)("h2",{id:"create-lambda"},"Create Lambda"),(0,r.kt)("p",null,"Create Function > Container Image > Fill the required fields > Select container image URI > Finalize Create Function",(0,r.kt)("br",{parentName:"p"}),"\n","step"),(0,r.kt)("h2",{id:"add-trigger"},"Add Trigger"),(0,r.kt)("p",null,"Add trigger > S3 > Choose Source Bucket > Event Type (All object crete) > Add (If there is already defined a trigger,",(0,r.kt)("br",{parentName:"p"}),"\n","should be delete old one and then add new one)"),(0,r.kt)("h2",{id:"auto-build-and-push"},"Auto build and push"),(0,r.kt)("p",null,"Should be define AWS credentials into ~/.aws or CI/CD variables."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"stages:  \n  - build  \n  - push\n\nbuild:  \n  only:  \n    - master  \n  stage: build  \n  script:  \n    - docker build -t ecr-repository-name  \n    - docker tag ecr-repository-name:latest account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest  \n  tags:  \n    - cd\n\npush:  \n  only:  \n    - master  \n  stage: push  \n  script:  \n    - aws ecr get-login-password --region location | docker login --username AWS --password-stdin account-id.dkr.ecr.location.amazonaws.com  \n    - docker push account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest  \n  tags:  \n    - cd  \n")),(0,r.kt)("p",null,(0,r.kt)("em",{parentName:"p"},">_ Unknown")," (2022-08-13 20:55:21)"),(0,r.kt)("p",null,"tags: aws, technical"))}u.isMDXComponent=!0}}]);
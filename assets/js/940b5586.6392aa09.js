"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[588],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),s=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},u=function(e){var t=s(e.components);return n.createElement(l.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(r),m=a,k=p["".concat(l,".").concat(m)]||p[m]||d[m]||o;return r?n.createElement(k,i(i({ref:t},u),{},{components:r})):n.createElement(k,i({ref:t},u))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=p;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},83:function(e,t,r){r.r(t),r.d(t,{assets:function(){return u},contentTitle:function(){return l},default:function(){return m},frontMatter:function(){return c},metadata:function(){return s},toc:function(){return d}});var n=r(7462),a=r(3366),o=(r(7294),r(3905)),i=["components"],c={},l="Customizing Lambda with Docker Image",s={unversionedId:"technical/aws/lambda-docker-image",id:"technical/aws/lambda-docker-image",title:"Customizing Lambda with Docker Image",description:"Dockerfile",source:"@site/docs/technical/aws/lambda-docker-image.md",sourceDirName:"technical/aws",slug:"/technical/aws/lambda-docker-image",permalink:"/technical/aws/lambda-docker-image",editUrl:"https://github.com/mehmetka/notebook/blob/master/docs/technical/aws/lambda-docker-image.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"lambda-accessing-rds",permalink:"/technical/aws/lambda-accessing-rds"},next:{title:"notes",permalink:"/technical/aws/notes"}},u={},d=[{value:"Dockerfile",id:"dockerfile",level:2},{value:"workdir/app.py",id:"workdirapppy",level:2},{value:"Testing at local",id:"testing-at-local",level:2},{value:"ECR Operations",id:"ecr-operations",level:2},{value:"Create Lambda",id:"create-lambda",level:2},{value:"Auto build and push with Gitlab CI",id:"auto-build-and-push-with-gitlab-ci",level:2}],p={toc:d};function m(e){var t=e.components,r=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("h1",{id:"customizing-lambda-with-docker-image"},"Customizing Lambda with Docker Image"),(0,o.kt)("h2",{id:"dockerfile"},"Dockerfile"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-dockerfile"},'FROM public.ecr.aws/lambda/python:3.8\nRUN yum -y install some-stuff\nCOPY app.py ${LAMBDA_TASK_ROOT}\nRUN pip3 install --target "${LAMBDA_TASK_ROOT}" dependencies\nCMD [ "app.handler" ]\n')),(0,o.kt)("h2",{id:"workdirapppy"},"workdir/app.py"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-python"},"def handler(event, context):\n    # your code\n")),(0,o.kt)("h2",{id:"testing-at-local"},"Testing at local"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-shell"},'cd workdir\ndocker build -t ecr-repository-name .\ndocker run --rm -v "$PWD":/tmp -p 9001:8080 ecr-repository-name\ncurl -XPOST "http://localhost:9001/2015-03-31/functions/function/invocations" -d \'{}\'\n')),(0,o.kt)("h2",{id:"ecr-operations"},"ECR Operations"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Required permissions to do ECR operations")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'"ecr:CreateRepository",\n"ecr:BatchGetImage",\n"ecr:GetAuthorizationToken",\n"ecr:UploadLayerPart",\n"ecr:PutImage",\n"ecr:BatchCheckLayerAvailability",\n"ecr:CompleteLayerUpload",\n"ecr:GetDownloadUrlForLayer",\n"ecr:InitiateLayerUpload"\n')),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},"Create a repository on ECR"),(0,o.kt)("li",{parentName:"ul"},"Build image (We did already before)"),(0,o.kt)("li",{parentName:"ul"},"docker tag ecr-repository-name:latest account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest"),(0,o.kt)("li",{parentName:"ul"},"aws ecr get-login-password --region location | docker login --username AWS --password-stdin account-id.dkr.ecr.location.amazonaws.com"),(0,o.kt)("li",{parentName:"ul"},"docker push account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest")),(0,o.kt)("h2",{id:"create-lambda"},"Create Lambda"),(0,o.kt)("p",null,"Create Function > Container Image > Fill the required fields > Select container image URI > Finalize Create Function\nstep"),(0,o.kt)("blockquote",null,(0,o.kt)("p",{parentName:"blockquote"},"Add trigger to your lambda if needed")),(0,o.kt)("h2",{id:"auto-build-and-push-with-gitlab-ci"},"Auto build and push with Gitlab CI"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-yaml"},"stages:\n  - build\n  - push\n\nbuild:\n  only:\n    - master\n  stage: build\n  script:\n    - docker build -t ecr-repository-name .\n    - docker tag ecr-repository-name:latest account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest\n  tags:\n    - cd\n\npush:\n  only:\n    - master\n  stage: push\n  script:\n    - aws ecr get-login-password --region location | docker login --username AWS --password-stdin account-id.dkr.ecr.location.amazonaws.com\n    - docker push account-id.dkr.ecr.location.amazonaws.com/ecr-repository-name:latest\n  tags:\n    - cd\n")))}m.isMDXComponent=!0}}]);
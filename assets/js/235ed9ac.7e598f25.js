"use strict";(self.webpackChunknotebook=self.webpackChunknotebook||[]).push([[393],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return d}});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),l=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},p=function(e){var n=l(e.components);return r.createElement(s.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(t),d=a,f=u["".concat(s,".").concat(d)]||u[d]||m[d]||o;return t?r.createElement(f,i(i({ref:n},p),{},{components:t})):r.createElement(f,i({ref:n},p))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:a,i[1]=c;for(var l=2;l<o;l++)i[l]=t[l];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},1819:function(e,n,t){t.r(n),t.d(n,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return c},metadata:function(){return l},toc:function(){return m}});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],c={},s=void 0,l={unversionedId:"aws/lambda-accessing-rds",id:"aws/lambda-accessing-rds",title:"lambda-accessing-rds",description:"Accessing RDS from Lambda",source:"@site/docs/aws/lambda-accessing-rds.md",sourceDirName:"aws",slug:"/aws/lambda-accessing-rds",permalink:"/aws/lambda-accessing-rds",editUrl:"https://github.com/mehmetka/notebook/blob/master/docs/aws/lambda-accessing-rds.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"elasticbeanstalk-php-env",permalink:"/aws/elasticbeanstalk-php-env"},next:{title:"Linux & Shell Commands",permalink:"/linux"}},p={},m=[{value:"Accessing RDS from Lambda",id:"accessing-rds-from-lambda",level:2},{value:"Source:",id:"source",level:3}],u={toc:m};function d(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"accessing-rds-from-lambda"},"Accessing RDS from Lambda"),(0,o.kt)("ol",null,(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Assume that you have an RDS")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create a role that has 'AWSLambdaVPCAccessExecutionRole' and take Role's ARN info")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Run:",(0,o.kt)("br",{parentName:"p"}),"\n","$ pip3 install --target . pymysql")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Change rds_config.py by RDS credentials")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Bundle the code as app.zip")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Find Subnet IDs and Security Group ID (Will be using in next step)")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Create Lambda:",(0,o.kt)("br",{parentName:"p"}),"\n","$ aws lambda create-function --function-name func-name --runtime python3.8 \\\n--zip-file fileb://app.zip \\\n--role arn:aws:iam::123456789012:role/lambda-vpc-role \\\n--vpc-config SubnetIds=${SubnetIDs},SecurityGroupIds=${SecurityGroupIDs}")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Give RDS/Aurora access rule to RDS Security Group (Whatever it is -> ${SecurityGroupIDs})")),(0,o.kt)("li",{parentName:"ol"},(0,o.kt)("p",{parentName:"li"},"Trig function:",(0,o.kt)("br",{parentName:"p"}),"\n","$ aws lambda invoke --function-name func-name output.txt"))),(0,o.kt)("h3",{id:"source"},"Source:"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"https://docs.aws.amazon.com/lambda/latest/dg/services-rds-tutorial.html"},"https://docs.aws.amazon.com/lambda/latest/dg/services-rds-tutorial.html")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre"},'import sys\nimport logging\nimport pymysql\n#rds settings\nrds_host  = "rds-instance-endpoint"\nname = "db_username"\npassword = "db_password"\ndb_name = "db_name"\n\nlogger = logging.getLogger()\nlogger.setLevel(logging.INFO)\n\ntry:\n    conn = pymysql.connect(host=rds_host, user=name, passwd=password, db=db_name, connect_timeout=5)\nexcept pymysql.MySQLError as e:\n    logger.error("ERROR: Unexpected error: Could not connect to MySQL instance.")\n    logger.error(e)\n    sys.exit()\n\nlogger.info("SUCCESS: Connection to RDS MySQL instance succeeded")\ndef lambda_handler(event, context):\n    """\n    This function fetches content from MySQL RDS instance\n    """\n\n    item_count = 0\n\n    with conn.cursor() as cur:\n        cur.execute("create table Employee ( EmpID  int NOT NULL, Name varchar(255) NOT NULL, PRIMARY KEY (EmpID))")\n        cur.execute(\'insert into Employee (EmpID, Name) values(1, "Joe")\')\n        cur.execute(\'insert into Employee (EmpID, Name) values(2, "Bob")\')\n        cur.execute(\'insert into Employee (EmpID, Name) values(3, "Mary")\')\n        conn.commit()\n        cur.execute("select * from Employee")\n        for row in cur:\n            item_count += 1\n            logger.info(row)\n            #print(row)\n    conn.commit()\n\n    return "Added %d items from RDS MySQL table" %(item_count)\n')))}d.isMDXComponent=!0}}]);